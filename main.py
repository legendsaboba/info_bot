import os
import requests
import telebot
from dotenv import load_dotenv, find_dotenv
from g4f.client import Client
from generate_img_with_sber import gen_img
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import wikipedia
from bs4 import BeautifulSoup
from googletrans import Translator
trans = Translator()
load_dotenv(find_dotenv())
token = os.getenv('token')
bot = telebot.TeleBot(token, parse_mode='HTML')
wikipedia.set_lang('ru')
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chatID = message.from_user.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('—Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è')
    button2 = KeyboardButton('–≥–∏—Ñ–∫–∞')
    button3 = KeyboardButton('—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É')
    btn4 = KeyboardButton('–≤–∏–∫–∏–ø–µ–¥–∏—è')
    btn5 = KeyboardButton('–ø–æ–≥–æ–¥–∞')
    btn6 = KeyboardButton('—Å–ª–æ–≤–∞—Ä—å')
    btn7 = KeyboardButton('—á–∞—Ç gpt')
    markup.row(btn7, btn6)
    markup.row(btn4, btn5)
    markup.row(button3)
    markup.row(button1)
    bot.send_message(chatID,'–ø—Ä–∏–≤–µ—Ç üëãüëãüëã —è - –±–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä, —è –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è ü´µ–≤–∞—Åü´µ. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫—Ä–∞—Ç–∫–æ, –∏–Ω–∞—á–µ –±—É–¥—É—Ç –æ—à–∏–±–∫–∏')
    bot.send_message(chatID, 'üëáüëáüëá–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—éüëáüëáüëá', reply_markup=markup)
@bot.message_handler(func=lambda callback: True)
def handle_callback(message):
    chatID = message.from_user.id
    button_call = message.text
    if button_call == '—Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è':
        bot.send_photo(chatID, open('–∫–æ—Ç.png', 'rb'))
    elif button_call == '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        gen_image(message)
    elif button_call == '–≤–∏–∫–∏–ø–µ–¥–∏—è':
        wiki(message)
    elif button_call == '–ø–æ–≥–æ–¥–∞':
        weather(message)
    elif button_call == '—Å–ª–æ–≤–∞—Ä—å':
        word(message)
    elif button_call == '—á–∞—Ç gpt':
        gpt1(message)
    elif button_call == '–ü–µ—Ä–º—å':
        weatherPerm(chatID)
    elif button_call == '–ú–æ—Å–∫–≤–∞':
        weatherMoskva(chatID)
    elif button_call == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é':
        weather1(message)
    else:
        bot.send_message(chatID, '–∫–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
def wiki(message):
    bot.send_message(message.chat.id, '–ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?')
    bot.register_next_step_handler(message, wiki2)
def wiki2(message):
    wiki_page = wikipedia.page(message.text)
    try:
        print(wiki_page.html, wiki_page.summary)
        bot.send_message(message.chat.id, wiki_page.summary)
    except:
        bot.send_message(message.chat.id, f'–∏–∑–≤–∏–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, https://ru.wikipedia.org/wiki/{message.text}')
@bot.message_handler(commands=['gen_img'])
def gen_image(message):
    bot.send_message(message.chat.id, '—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?')
    bot.register_next_step_handler(message, gen_img2)
def gen_img2(message):
    try:
        content = gen_img(message.text, 'C12C1BD6B4AB2A8DA8F62ED242410B4D', '910D77FDD2A8F96AAA4D48E6555A6C54')
        bot.send_photo(message.chat.id, content)
    except:
        bot.send_message(message.chat.id, '–Ω–µ –ø–æ–Ω—è–ª')
@bot.message_handler(commands=['gpt'])
def gpt1(message):
    chatID = message.from_user.id
    bot.send_message(chatID,'–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç')
    bot.register_next_step_handler(message, gpt2)
def gpt2(message):
    bot.send_message(message.from_user.id, trans.translate(text=gpt(message.text),scr='auto',dest='ru').text)
def gpt(query):
    client = Client()
    try:
        response = client.chat.completions.create(
            model = 'gpt-3.5-turbo',

            messages=[{'role':'user','content': query}]
        )
        return response.choices[0].message.content
    except:
        bot.send_message(query.chat.id, '–Ω–µ –ø–æ–Ω—è–ª')
@bot.message_handler(commands=['weather'])
def weather(message):
    button_call = message.text
    chatID = message.from_user.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    key = KeyboardButton('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location=True)
    btn1 = KeyboardButton('–ü–µ—Ä–º—å')
    btn2 = KeyboardButton('–ú–æ—Å–∫–≤–∞')
    markup.row(key)
    markup.row(btn1, btn2)
    bot.send_message(chatID, '–≥–¥–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É?', reply_markup=markup)
@bot.message_handler(func=lambda callback: True)
def handle_callback(message):
    chatID = message.from_user.id
    button_call = message.text
    if button_call == '–ü–µ—Ä–º—å':
        weatherPerm(chatID)
    elif button_call == '–ú–æ—Å–∫–≤–∞':
        weatherMoskva(chatID)
    elif button_call == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é':
        weather1(message)
def weather1(message):
    chatID = message.from_user.id
    lat = 0
    lon = 0
    current_weather = get_temp(lat, lon)
    bot.send_message(chatID, f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_weather} –≥—Ä–∞–¥—É—Å–æ–≤ —Ü–µ–ª—å—Å–∏—è')
def weatherPerm(chatID):
    lat = 56
    lon = 56
    current_weather = get_temp(lat, lon)
    bot.send_message(chatID, f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_weather} –≥—Ä–∞–¥—É—Å–æ–≤ —Ü–µ–ª—å—Å–∏—è')
def weatherMoskva(chatID):
    lat = 55
    lon = 37
    current_weather = get_temp(lat, lon)
    bot.send_message(chatID, f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_weather} –≥—Ä–∞–¥—É—Å–æ–≤ —Ü–µ–ª—å—Å–∏—è')
def get_temp(lat, lon):
    url = f'https://api.open-meteo.com/v1/forecast?latitude={lat}.52&longitude={lon}.41&current=temperature_2m,cloud_cover,wind_speed_10m&hourly=temperature_2m'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        current_temp = str(data['current']['temperature_2m'])
        return current_temp
    else:
        print(f'–æ—à–∏–±–∫–∞: {response.status_code}')
        return '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É'
@bot.message_handler(commands=['word'])
def word(message):
    bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ')
    bot.register_next_step_handler(message, get_info_word)
def get_info_word(message):
    url = f'https://ru.wiktionary.org/wiki/{message.text.lower()}'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    answer = soup.find('ol')
    bot.send_message(message.chat.id, f'{message.text} - {answer.text}')
bot.infinity_polling()